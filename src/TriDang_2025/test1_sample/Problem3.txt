int position(int[] A, X)
    N = length(A)
    for i from 0 to N - 1
        if (X < A[i])
            return ____
    return N

Part 1
Replace ____ by i (X will take position i)

Complexity analysis
The number in curly braces on the right of each line is the execution times
of the respective statement on the left (for values like N-1, N-2, N+1, N+2, I will just write N to simplify the calculations)

int position(int[] A, X)
    N = length(A)                   {1}
    for i from 0 to N - 1           {N}
        if (X < A[i])               {N}
            return ____             {1}
    return N                        {1}

The total execution times is: 1 + N + N + 1 + 1 = 2*N + 3
Keep the most significant element and remove the constants, it is N
The big-O of above algorithm is O(N)

----------------
Part 2
Because the array is sorted, we can compare X with the middle element
and reduce the size of the array to a half each thime
thus, the number of iterations in the loop is log(N)

int positionFaster(int[] A, X)
    left = 0                          {1}
    right = N - 1                     {1}
    while (left < right)              {logN}
        mid = (left + right) / 2      {logN}
        if A[mid] < X                 {logN}
            left = mid + 1            {logN} 
        else
            right = mid               {logN}
    if A[left] < X                    {1}
        return left + 1               {1}
    return left                       {1}

The total execution times is: 1 + 1 + log(N) + log(N) + log(N) + log(N) + log(N) + 1 + 1 + 1
Keep the most significant element and remove the constants, it is log(N)
The big-O of above algorithm is O(log(N))
