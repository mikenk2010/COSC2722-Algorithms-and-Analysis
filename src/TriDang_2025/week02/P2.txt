// Approach 1: brute force
// Idea: for any value, only display its first occurence
// If a value X at index i is the first occurence,
// => no preceding value equals to X

for i = 0 to N-1
  found = false
  for j = 0 to i-1
    if A[j] == A[i]
	    found = true
      break
  if !found
    print A[i]

Complexity analysis:
  The inner loop executes at most i times for each outer iteration
  i ranges from 0 to N-1
  => The total execution times of the if statement in the 
  inner loop: T(N) = 1 + 2 + ... + N
  T(N) = N*(N+1)/2
  Remove the less significant components and multiplicative constants, we have
  T(N) = O(N^2)


// Approach 2: sort then search
// Idea: we also display a value if it is the first occurence of that value
// Because the array is sorted, the first occurence is the one != its preceding element


sort(A)  // assumption: complexity of sort = O(N*lg(N))
print A[0]
for i = 1 to N-1
  if A[i] != A[i-1]
    print A[i]

Complexity analysis:
  The maximum number of statements executed in the for loop: 2 (comparison and printing)
  There are N iterations
  => Complexity of the for loop O(N)
  Final complexity: O(N*lg(N)) + O(N) = O(N*lg(N))
